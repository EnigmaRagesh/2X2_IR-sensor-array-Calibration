// Generated by gencpp from file toycode/cam.msg
// DO NOT EDIT!


#ifndef TOYCODE_MESSAGE_CAM_H
#define TOYCODE_MESSAGE_CAM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace toycode
{
template <class ContainerAllocator>
struct cam_
{
  typedef cam_<ContainerAllocator> Type;

  cam_()
    : x(0)
    , y(0)
    , camera_id(0)
    , point_id(0)
    , stamp()  {
    }
  cam_(const ContainerAllocator& _alloc)
    : x(0)
    , y(0)
    , camera_id(0)
    , point_id(0)
    , stamp()  {
  (void)_alloc;
    }



   typedef uint16_t _x_type;
  _x_type x;

   typedef uint16_t _y_type;
  _y_type y;

   typedef uint16_t _camera_id_type;
  _camera_id_type camera_id;

   typedef uint8_t _point_id_type;
  _point_id_type point_id;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;





  typedef boost::shared_ptr< ::toycode::cam_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::toycode::cam_<ContainerAllocator> const> ConstPtr;

}; // struct cam_

typedef ::toycode::cam_<std::allocator<void> > cam;

typedef boost::shared_ptr< ::toycode::cam > camPtr;
typedef boost::shared_ptr< ::toycode::cam const> camConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::toycode::cam_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::toycode::cam_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace toycode

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'toycode': ['/home/ragesh/catkin_ws/src/toycode/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::toycode::cam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::toycode::cam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::toycode::cam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::toycode::cam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::toycode::cam_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::toycode::cam_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::toycode::cam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b6e378fbcfee096e6fdfd7d90c3f26de";
  }

  static const char* value(const ::toycode::cam_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb6e378fbcfee096eULL;
  static const uint64_t static_value2 = 0x6fdfd7d90c3f26deULL;
};

template<class ContainerAllocator>
struct DataType< ::toycode::cam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "toycode/cam";
  }

  static const char* value(const ::toycode::cam_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::toycode::cam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 x\n\
uint16 y\n\
uint16 camera_id\n\
uint8 point_id\n\
time stamp\n\
";
  }

  static const char* value(const ::toycode::cam_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::toycode::cam_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.camera_id);
      stream.next(m.point_id);
      stream.next(m.stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cam_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::toycode::cam_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::toycode::cam_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.y);
    s << indent << "camera_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.camera_id);
    s << indent << "point_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.point_id);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOYCODE_MESSAGE_CAM_H
